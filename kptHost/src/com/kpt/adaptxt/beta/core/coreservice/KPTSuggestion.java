/******************************************************************************
 * COPYRIGHT (c) 2010 KeyPoint Technologies (UK) Ltd. All rights reserved.
 *
 * The copyright to the computer program(s) herein is the property of KeyPoint
 * Technologies (UK) Ltd. The program(s) may be used and/or copied only with
 * the written permission from KeyPoint Technologies (UK) Ltd or in accordance
 * with the terms and conditions stipulated in the agreement/contract under
 * which the program(s) have been supplied.
 */
/**
 * @file    KPTSuggestion.java
 *
 * @brief   
 *
 * @details
 *
 *****************************************************************************/
package com.kpt.adaptxt.beta.core.coreservice;

/**
 * This class holds the information of a single suggestion. So all the required 
 * fields to define a single suggestion are included in the class.
 * @author 
 *
 */
public class KPTSuggestion {
	
	/**
	 * Empty Suggestion.
	 * This value is used for initialisation only.
	 * @sa KPT_SUGGS_TYPE_EMPTY::suggestionType
	 */
	public static final int KPT_SUGGS_TYPE_EMPTY = 0;

	/**
	 * General Word Suggestion.
	 * Represents a normal word suggestion.
	 */
	public static final int KPT_SUGGS_TYPE_WORD = 1;

	/**
	 * Elision Suggestion.
	 * Represents an elision suggestion.
	 */
	public static final int KPT_SUGGS_TYPE_Elision = 2;

	/**
	 * Phrase Suggestion (Text).
	 * Generated as part of a phrase suggestion. Phrase
	 * suggestions contain one or more suggestion entries.
	 */
	public static final int KPT_SUGGS_TYPE_PHRASE_TEXT = 3;

	/**
	 * Phrase Suggestion (Delimiter).
	 * Generated as part of a phrase suggestion. Phrase
	 * suggestions contain one or more suggestion entries.
	 */
	public static final int KPT_SUGGS_TYPE_PHRASE_DELIMETER = 4;

	/**
	 * Phrase Suggestion (Punctuation).
	 * Generated as part of a phrase suggestion. Phrase
	 * suggestions contain one or more suggestion entries.
	 */
	public static final int KPT_SUGGS_TYPE_PHRASE_PUNTUATION = 5;

	/**
	 * Prefix Suggestion.
	 * The suggestion contains a valid prefix from the loaded dictionaries. The
	 * prefix may or may not be a complete word.
	 */
	public static final int KPT_SUGGS_TYPE_PREFIX_MATCH = 6;

	/**
	 * Content Suggestion.
	 * The suggestion contains tagged content.
	 */
	public static final int KPT_SUGGS_TYPE_CONTENT = 7;

	/**
	 * Punctuation Suggestion.
	 * The suggestion is based on the text before the cursor and a variable punctuation list.
	 */
	public static final int KPT_SUGGS_TYPE_PUNCTUATION_LIST = 8;

	/**
	 * Acronym Expansion.
	 * The suggestion expands an acronym to its full form.
	 */
	public static final int KPT_SUGGS_TYPE_ACRONYM_EXPANSION = 9;

	/**
	 * Error Correction.
	 * The suggestion is generated by the error correction algorithms.
	 */
	public static final int KPT_SUGGS_TYPE_ERROR_CORRECTION = 10;

	/**
	 * Space Correction.
	 * The suggestion is based on language rules for space and punctuation.
	 */
	public static final int KPT_SUGGS_TYPE_SPACE_CORRECTION = 11;

	/**
	 * Space Contraction.
	 * The suggestion ignores the previous space in the buffer.
	 */
	public static final int KPT_SUGGS_TYPE_SPACE_CONTRACTION = 12;

	/**
	 * Next Letter Set.
	 * The suggestion text represents a set of letters that would match a valid suggestion.
	 */
	public static final int KPT_SUGGS_TYPE_NEXT_LETTER = 13;

	/**
	 * Table Lookup.
	 * The suggestion is a match in the Table Lookup Component.
	 * KPTSuggEntryT::extraDetails represents a const @ref KPTSuggDetailsTableT*
	 */
	public static final int KPT_SUGGS_TYPE_TABLE_LOOKUP = 14;

	/**
	 * Revert Correction.
	 * The suggestion contains the spelling for a word before it
	 * was replaced with an auto-correction.
	 */
	public static final int KPT_SUGGS_TYPE_REVERT_CORRECTION = 15;

	/**
	 * Composition Suggestion.
	 * The suggestion contains the character contained in the composition string
	 */
	public static final int KPT_SUGGS_TYPE_COMPOSITION = 16;
	
	/**
	 * Auto Error correction
	 */
	public static final int KPT_SUGGS_TYPE_AUTO_CORRECTION = 17;
	
	
	/**
	 * ATR Suggestion
	 */
	public static final int KPT_SUGGS_TYPE_ATR = 18;
	
	/**
	 * Composition Suggestion.
	 * The suggestion contains the character contained in the composition string
	 */
	public static final int KPT_SUGGS_TYPE_VOICE = 17;
	
	private int mSuggestionId;
	private int mSsuggestionType;
	private String mSuggestionString;
	private int mSuggestionLength;
	private boolean mIsPersonalDictWord;
	
	
	public void setsuggestionId(int suggestionId){
		mSuggestionId = suggestionId;
	}
	
	public void setsuggestionType(int suggestionType){
		mSsuggestionType = suggestionType;
	}
	
	public void setsuggestionString(String suggestionString){
		mSuggestionString = suggestionString;
	}
	
	public void setsuggestionLength(int suggestionLength){
		mSuggestionLength = suggestionLength;
	}
	
	public int getsuggestionId(){
		return mSuggestionId; 
	}
	
	public int getsuggestionType(){
		return mSsuggestionType;
	}
	
	public String getsuggestionString(){
		return mSuggestionString;
	}

	public void setsuggestionIsUserDicWord(boolean isPersonalDictWord) {
		mIsPersonalDictWord = isPersonalDictWord;
	}
	public boolean getsuggestionIsUserDicWord(){
		return mIsPersonalDictWord;
	}
	
		
}
